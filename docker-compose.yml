services:
  # Base de datos MySQL (compartida entre QA y PROD)
  mysql:
    image: mysql:8.0
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword123
      MYSQL_DATABASE: dockerapp
      MYSQL_USER: appuser
      MYSQL_PASSWORD: apppassword123
    ports:
      - "3306:3306"
    volumes:
      # Volumen persistente para datos de MySQL
      - mysql_data:/var/lib/mysql
      # Script de inicialización (opcional)
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Aplicación en entorno QA
  app-qa:
    image: baltasarlopezv/tp02-docker-app:v1.0
    container_name: dockerapp-qa
    restart: always
    environment:
      - PORT=3000
      - ENVIRONMENT=QA
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=appuser
      - DB_PASSWORD=apppassword123
      - DB_NAME=dockerapp
    ports:
      - "3000:3000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network
    labels:
      - "environment=qa"
      - "app=dockerapp"

  # Aplicación en entorno PROD
  app-prod:
    image: baltasarlopezv/tp02-docker-app:v1.0
    container_name: dockerapp-prod
    restart: always
    environment:
      - PORT=3000
      - ENVIRONMENT=PROD
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=appuser
      - DB_PASSWORD=apppassword123
      - DB_NAME=dockerapp
    ports:
      - "3001:3000"  # Puerto externo 3001, interno 3000
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network
    labels:
      - "environment=prod"
      - "app=dockerapp"

# Volúmenes persistentes
volumes:
  mysql_data:
    driver: local

# Red personalizada para que los contenedores se comuniquen
networks:
  app-network:
    driver: bridge
